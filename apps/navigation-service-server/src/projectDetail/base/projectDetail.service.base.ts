/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProjectDetail as PrismaProjectDetail,
  Project as PrismaProject,
} from "@prisma/client";

export class ProjectDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProjectDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.projectDetail.count(args);
  }

  async projectDetails(
    args: Prisma.ProjectDetailFindManyArgs
  ): Promise<PrismaProjectDetail[]> {
    return this.prisma.projectDetail.findMany(args);
  }
  async projectDetail(
    args: Prisma.ProjectDetailFindUniqueArgs
  ): Promise<PrismaProjectDetail | null> {
    return this.prisma.projectDetail.findUnique(args);
  }
  async createProjectDetail(
    args: Prisma.ProjectDetailCreateArgs
  ): Promise<PrismaProjectDetail> {
    return this.prisma.projectDetail.create(args);
  }
  async updateProjectDetail(
    args: Prisma.ProjectDetailUpdateArgs
  ): Promise<PrismaProjectDetail> {
    return this.prisma.projectDetail.update(args);
  }
  async deleteProjectDetail(
    args: Prisma.ProjectDetailDeleteArgs
  ): Promise<PrismaProjectDetail> {
    return this.prisma.projectDetail.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.projectDetail
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
