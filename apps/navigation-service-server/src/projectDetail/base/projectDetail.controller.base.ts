/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjectDetailService } from "../projectDetail.service";
import { ProjectDetailCreateInput } from "./ProjectDetailCreateInput";
import { ProjectDetail } from "./ProjectDetail";
import { ProjectDetailFindManyArgs } from "./ProjectDetailFindManyArgs";
import { ProjectDetailWhereUniqueInput } from "./ProjectDetailWhereUniqueInput";
import { ProjectDetailUpdateInput } from "./ProjectDetailUpdateInput";

export class ProjectDetailControllerBase {
  constructor(protected readonly service: ProjectDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProjectDetail })
  async createProjectDetail(
    @common.Body() data: ProjectDetailCreateInput
  ): Promise<ProjectDetail> {
    return await this.service.createProjectDetail({
      data: {
        ...data,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        detail: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProjectDetail] })
  @ApiNestedQuery(ProjectDetailFindManyArgs)
  async projectDetails(
    @common.Req() request: Request
  ): Promise<ProjectDetail[]> {
    const args = plainToClass(ProjectDetailFindManyArgs, request.query);
    return this.service.projectDetails({
      ...args,
      select: {
        createdAt: true,
        detail: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProjectDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async projectDetail(
    @common.Param() params: ProjectDetailWhereUniqueInput
  ): Promise<ProjectDetail | null> {
    const result = await this.service.projectDetail({
      where: params,
      select: {
        createdAt: true,
        detail: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProjectDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProjectDetail(
    @common.Param() params: ProjectDetailWhereUniqueInput,
    @common.Body() data: ProjectDetailUpdateInput
  ): Promise<ProjectDetail | null> {
    try {
      return await this.service.updateProjectDetail({
        where: params,
        data: {
          ...data,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          detail: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProjectDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProjectDetail(
    @common.Param() params: ProjectDetailWhereUniqueInput
  ): Promise<ProjectDetail | null> {
    try {
      return await this.service.deleteProjectDetail({
        where: params,
        select: {
          createdAt: true,
          detail: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
